@PACKAGE_INIT@

if (@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

set(CMAKE_MODULE_PATH_BACKUP_URDFDOM ${CMAKE_MODULE_PATH})
list(APPEND CMAKE_MODULE_PATH "${@PROJECT_NAME@_DIR}")

set(@PKG_NAME@_INCLUDE_DIRS "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@")

foreach(lib @PKG_LIBRARIES@)
  set(onelib "${lib}-NOTFOUND")
  set(onelibd "${lib}-NOTFOUND")
  find_library(onelib ${lib}
    PATHS "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@"
    NO_DEFAULT_PATH)
  find_library(onelibd ${lib}d
    PATHS "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@"
    NO_DEFAULT_PATH)
  if(onelib-NOTFOUND AND onelibd-NOTFOUND)
    message(FATAL_ERROR "Library '${lib}' in package @PKG_NAME@ is not installed properly")
  endif()
  if(onelib AND onelibd)
    list(APPEND @PKG_NAME@_LIBRARIES $<$<NOT:$<CONFIG:Debug>>:${onelib}>)
    list(APPEND @PKG_NAME@_LIBRARIES $<$<CONFIG:Debug>:${onelibd}>)
  else()
    if(onelib)
      list(APPEND @PKG_NAME@_LIBRARIES ${onelib})
    else()
      list(APPEND @PKG_NAME@_LIBRARIES ${onelibd})
    endif()
  endif()
  list(APPEND @PKG_NAME@_TARGETS @PROJECT_NAME@::${lib})
endforeach()

include(CMakeFindDependencyMacro)
if(@USE_VENDORED_DEPS@)
  find_dependency(tinyxml2_vendor QUIET)
  find_dependency(console_bridge_vendor QUIET)
else()
  find_dependency(TinyXML2 REQUIRED)
  find_dependency(console_bridge REQUIRED)
endif()
foreach(dep @PKG_DEPENDS@)
  if(NOT ${dep}_FOUND)
    find_dependency(${dep})
  endif()
endforeach()

if(NOT TARGET urdfdom_headers::urdfdom_headers)
  add_library(urdfdom_headers::urdfdom_headers INTERFACE IMPORTED)
  set_target_properties(urdfdom_headers::urdfdom_headers PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${urdfdom_headers_INCLUDE_DIRS}"
  )
endif()
list(APPEND @PKG_NAME@_INCLUDE_DIRS "${urdfdom_headers_INCLUDE_DIRS}")

foreach(exp @PKG_EXPORTS@)
  include(${@PROJECT_NAME@_DIR}/${exp}Export.cmake)
endforeach()

set(@PKG_NAME@_LIBRARIES ${@PKG_NAME@_TARGETS})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_BACKUP_URDFDOM})
